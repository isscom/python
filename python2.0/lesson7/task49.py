# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь.

# Напишите функцию find_farthest_orbit(list_of_orbits),
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета.

# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты.

# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты.

# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса.
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса.

# При решении задачи используйте списочные выражения.
# Подсказка: проще всего будет найти эллипс в два шага:
# сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь.

# Гарантируется, что самая далекая планета ровно одна

# РЕШЕНИЕ БЕЗ ПИ:
def find_farthest_orbit(list_of_orbit):
    list_of_elliptical_orbits = [i for i in list_of_orbit if i[0] != i[1]] # возвращает новый список_1 (list_of_elliptical_orbits), где 1-ый элемент не равен 2-му
    list_of_areas = [(i[0] * i[1]) for i in list_of_elliptical_orbits] # возвращает новый список_2 (list_of_areas) с произведениями элементов (1-й * 2-й)
    max_area_index = list_of_areas.index(max(list_of_areas)) # возвращает индекс максимального элемента из списка_2 (list_of_areas)
    return list_of_elliptical_orbits[max_area_index] # и возвращаем максимальный элемент из данного списка (с индексом макс. элемента)

# РЕШЕНИЕ С ПИ:
def find_farthest_orbit_2(list_of_orbit):
    pi = 3.14
    orbits_max_S = [(0, 0)] # переменная, куда будем закидывать значение с макс. площадью
    max_S = 0 # переменная со значением макс. площади
    for i in list_of_orbit:
         if i[0] != i[1]:
             if max_S < pi * i[0] * i[1]: # если переменная с максимальной площадью эллипса меньше, чем {формула нахождения эллипса} очередного кортежа
                 max_S = pi * i[0] * i[1] # считаем площадь эллипса очередного кортежа - максимальной и
                 orbits_max_S.pop() # удаляем предыдущее значение кортежа
                 orbits_max_S.append(i) # добавляем новое (чтобы в списке оставалось только максимальное)
    return orbits_max_S[0]

# Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))
print(*find_farthest_orbit_2(orbits))
# Вывод:
# 2.5 10
